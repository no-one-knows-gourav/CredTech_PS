{"ast":null,"code":"export const calculateCreditScore = company => {\n  // Pseudo credit score algorithm\n  // Weights for different factors\n  const weights = {\n    profitability: 0.25,\n    // Net margin\n    liquidity: 0.20,\n    // Current ratio\n    leverage: 0.25,\n    // Debt ratio (inverse)\n    efficiency: 0.15,\n    // ROA\n    growth: 0.15 // Revenue growth\n  };\n\n  // Calculate net margin\n  const netMargin = company.netIncome / company.revenue;\n\n  // Calculate revenue growth (simplified - using last year data)\n  const currentRevenue = company.historicalData[company.historicalData.length - 1].revenue;\n  const previousRevenue = company.historicalData[company.historicalData.length - 2].revenue;\n  const revenueGrowth = (currentRevenue - previousRevenue) / previousRevenue;\n\n  // Normalize scores to 0-100 scale\n  const scores = {\n    profitability: Math.min(100, Math.max(0, netMargin * 400)),\n    // Scale net margin\n    liquidity: Math.min(100, Math.max(0, (company.currentRatio - 0.5) * 50)),\n    // Scale current ratio\n    leverage: Math.min(100, Math.max(0, (1 - company.debtRatio) * 100)),\n    // Inverse debt ratio\n    efficiency: Math.min(100, Math.max(0, company.roa * 500)),\n    // Scale ROA\n    growth: Math.min(100, Math.max(0, 50 + revenueGrowth * 200)) // Scale growth rate\n  };\n\n  // Calculate weighted average\n  const creditScore = Math.round(scores.profitability * weights.profitability + scores.liquidity * weights.liquidity + scores.leverage * weights.leverage + scores.efficiency * weights.efficiency + scores.growth * weights.growth);\n  return Math.min(100, Math.max(0, creditScore));\n};","map":{"version":3,"names":["calculateCreditScore","company","weights","profitability","liquidity","leverage","efficiency","growth","netMargin","netIncome","revenue","currentRevenue","historicalData","length","previousRevenue","revenueGrowth","scores","Math","min","max","currentRatio","debtRatio","roa","creditScore","round"],"sources":["/Users/suhani/company-credit-score-calculator/src/utils/creditScoreCalculator.js"],"sourcesContent":["export const calculateCreditScore = (company) => {\n  // Pseudo credit score algorithm\n  // Weights for different factors\n  const weights = {\n    profitability: 0.25,    // Net margin\n    liquidity: 0.20,        // Current ratio\n    leverage: 0.25,         // Debt ratio (inverse)\n    efficiency: 0.15,       // ROA\n    growth: 0.15           // Revenue growth\n  };\n\n  // Calculate net margin\n  const netMargin = company.netIncome / company.revenue;\n  \n  // Calculate revenue growth (simplified - using last year data)\n  const currentRevenue = company.historicalData[company.historicalData.length - 1].revenue;\n  const previousRevenue = company.historicalData[company.historicalData.length - 2].revenue;\n  const revenueGrowth = (currentRevenue - previousRevenue) / previousRevenue;\n\n  // Normalize scores to 0-100 scale\n  const scores = {\n    profitability: Math.min(100, Math.max(0, netMargin * 400)), // Scale net margin\n    liquidity: Math.min(100, Math.max(0, (company.currentRatio - 0.5) * 50)), // Scale current ratio\n    leverage: Math.min(100, Math.max(0, (1 - company.debtRatio) * 100)), // Inverse debt ratio\n    efficiency: Math.min(100, Math.max(0, company.roa * 500)), // Scale ROA\n    growth: Math.min(100, Math.max(0, 50 + (revenueGrowth * 200))) // Scale growth rate\n  };\n\n  // Calculate weighted average\n  const creditScore = Math.round(\n    scores.profitability * weights.profitability +\n    scores.liquidity * weights.liquidity +\n    scores.leverage * weights.leverage +\n    scores.efficiency * weights.efficiency +\n    scores.growth * weights.growth\n  );\n\n  return Math.min(100, Math.max(0, creditScore));\n};"],"mappings":"AAAA,OAAO,MAAMA,oBAAoB,GAAIC,OAAO,IAAK;EAC/C;EACA;EACA,MAAMC,OAAO,GAAG;IACdC,aAAa,EAAE,IAAI;IAAK;IACxBC,SAAS,EAAE,IAAI;IAAS;IACxBC,QAAQ,EAAE,IAAI;IAAU;IACxBC,UAAU,EAAE,IAAI;IAAQ;IACxBC,MAAM,EAAE,IAAI,CAAW;EACzB,CAAC;;EAED;EACA,MAAMC,SAAS,GAAGP,OAAO,CAACQ,SAAS,GAAGR,OAAO,CAACS,OAAO;;EAErD;EACA,MAAMC,cAAc,GAAGV,OAAO,CAACW,cAAc,CAACX,OAAO,CAACW,cAAc,CAACC,MAAM,GAAG,CAAC,CAAC,CAACH,OAAO;EACxF,MAAMI,eAAe,GAAGb,OAAO,CAACW,cAAc,CAACX,OAAO,CAACW,cAAc,CAACC,MAAM,GAAG,CAAC,CAAC,CAACH,OAAO;EACzF,MAAMK,aAAa,GAAG,CAACJ,cAAc,GAAGG,eAAe,IAAIA,eAAe;;EAE1E;EACA,MAAME,MAAM,GAAG;IACbb,aAAa,EAAEc,IAAI,CAACC,GAAG,CAAC,GAAG,EAAED,IAAI,CAACE,GAAG,CAAC,CAAC,EAAEX,SAAS,GAAG,GAAG,CAAC,CAAC;IAAE;IAC5DJ,SAAS,EAAEa,IAAI,CAACC,GAAG,CAAC,GAAG,EAAED,IAAI,CAACE,GAAG,CAAC,CAAC,EAAE,CAAClB,OAAO,CAACmB,YAAY,GAAG,GAAG,IAAI,EAAE,CAAC,CAAC;IAAE;IAC1Ef,QAAQ,EAAEY,IAAI,CAACC,GAAG,CAAC,GAAG,EAAED,IAAI,CAACE,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,GAAGlB,OAAO,CAACoB,SAAS,IAAI,GAAG,CAAC,CAAC;IAAE;IACrEf,UAAU,EAAEW,IAAI,CAACC,GAAG,CAAC,GAAG,EAAED,IAAI,CAACE,GAAG,CAAC,CAAC,EAAElB,OAAO,CAACqB,GAAG,GAAG,GAAG,CAAC,CAAC;IAAE;IAC3Df,MAAM,EAAEU,IAAI,CAACC,GAAG,CAAC,GAAG,EAAED,IAAI,CAACE,GAAG,CAAC,CAAC,EAAE,EAAE,GAAIJ,aAAa,GAAG,GAAI,CAAC,CAAC,CAAC;EACjE,CAAC;;EAED;EACA,MAAMQ,WAAW,GAAGN,IAAI,CAACO,KAAK,CAC5BR,MAAM,CAACb,aAAa,GAAGD,OAAO,CAACC,aAAa,GAC5Ca,MAAM,CAACZ,SAAS,GAAGF,OAAO,CAACE,SAAS,GACpCY,MAAM,CAACX,QAAQ,GAAGH,OAAO,CAACG,QAAQ,GAClCW,MAAM,CAACV,UAAU,GAAGJ,OAAO,CAACI,UAAU,GACtCU,MAAM,CAACT,MAAM,GAAGL,OAAO,CAACK,MAC1B,CAAC;EAED,OAAOU,IAAI,CAACC,GAAG,CAAC,GAAG,EAAED,IAAI,CAACE,GAAG,CAAC,CAAC,EAAEI,WAAW,CAAC,CAAC;AAChD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}